Description: Migrate from PCRE to PCRE2
Author: Rafael Laboissi√®re <rafael@debian.org>
Forwarded: https://savannah.gnu.org/bugs/?61570
Last-Update: 2021-11-26

--- octave-strings-1.2.0.orig/src/Makefile
+++ octave-strings-1.2.0/src/Makefile
@@ -1,11 +1,6 @@
-OCTAVE ?= octave
 MKOCTFILE ?= mkoctfile -Wall
 
-PCRE_SWITCHES := $(shell $(OCTAVE) \
-	--no-gui --no-init-file --no-site-file --silent --no-history \
-	--eval 'disp (octave_config_info ("PCRE_LIBS"));' \
-	--eval 'disp (octave_config_info ("PCRE_CPPFLAGS"));' \
-	)
+PCRE_SWITCHES := $(shell pcre2-config --cflags) $(shell pcre2-config --libs8)
 
 pcregexp.oct: %.oct: %.cc
 	$(MKOCTFILE) $(PCRE_SWITCHES) -o $@ $<
--- octave-strings-1.2.0.orig/src/pcregexp.cc
+++ octave-strings-1.2.0/src/pcregexp.cc
@@ -21,8 +21,11 @@
 // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
+#define PCRE2_DATA_WIDTH 8
+#define PCRE2_CODE_UNIT_WIDTH 8
+
 #include <octave/oct.h>
-#include <pcre.h>
+#include <pcre2.h>
 #include <iostream>
 #include <vector>
 
@@ -54,42 +57,36 @@ Check your system's @code{pcre} man page
     }
 
     // Compile expression
-    pcre *re;
-    const char *err;
-    int erroffset;
-    re = pcre_compile(pattern.c_str(), 0, &err, &erroffset, NULL);
+    pcre2_code *re;
+    PCRE2_UCHAR err[128];
+    PCRE2_SIZE erroffset;
+    int errnumber;
+
+    re = pcre2_compile((PCRE2_SPTR)pattern.c_str(), PCRE2_ZERO_TERMINATED, 0, &errnumber, &erroffset, NULL);
     
     if (re == NULL) {
-        error("pcregexp: %s at position %d of expression", err, erroffset);
+        pcre2_get_error_message(errnumber, err, sizeof(err));
+        error("pcregexp: %s at position %ld of expression", err, erroffset);
         return retval;
     }
 
-    // Get nr of subpatterns
-    int subpatterns;
-    int status = pcre_fullinfo(re, NULL, PCRE_INFO_CAPTURECOUNT, &subpatterns);
-
     // Match expression
-    OCTAVE_LOCAL_BUFFER(int, ovector, (subpatterns+1)*3);
-    int matches = pcre_exec(re, NULL, input.c_str(), input.length(), 0, 0, ovector, (subpatterns+1)*3);
-
-    if (matches == PCRE_ERROR_NOMATCH) {
+    pcre2_match_data *match_data;
+    PCRE2_SIZE *ovector;
+    match_data = pcre2_match_data_create_from_pattern(re, NULL);
+    int matches = pcre2_match(re, (PCRE2_SPTR)input.c_str(), input.length(), 0, 0, match_data, NULL);
+   
+    if (matches == PCRE2_ERROR_NOMATCH) {
         for (int i=nargout-1; i>=0; i--) retval(i) = "";
         retval(0) = Matrix();
-        pcre_free(re);
+        pcre2_code_free(re);
         return retval;
     } else if (matches < -1) {
         error("pcregexp: internal error calling pcre_exec");
         return retval;
     }
 
-    const char **listptr;
-    status = pcre_get_substring_list(input.c_str(), ovector, matches, &listptr);
-
-    if (status == PCRE_ERROR_NOMEMORY) {
-        error("pcregexp: cannot allocate memory in pcre_get_substring_list");
-        pcre_free(re);
-        return retval;
-    }
+    ovector = pcre2_get_ovector_pointer(match_data);
 
     // Pack indeces
     Matrix indeces = Matrix(matches, 2);
@@ -102,13 +100,13 @@ Check your system's @code{pcre} man page
 
     // Pack substrings
     retval.resize(nargout + 1);
-    for (int i = 0; i < matches; i++) {
-        retval(i+1) = *(listptr+i+1);
-    }
+    for (int i = 1; i < matches; i++)
+        retval(i) = std::string(input.c_str() + ovector[2*i],
+                                ovector[2*i+1] - ovector[2*i]);
 
     // Free memory
-    pcre_free_substring_list(listptr);
-    pcre_free(re);
+    pcre2_match_data_free(match_data);
+    pcre2_code_free(re);
 
     if (nargout > matches) {
         error("pcregexp: too many return values requested");
